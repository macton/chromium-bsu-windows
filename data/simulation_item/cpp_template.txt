#include <float.h>
#include <stdint.h>
#include "vec2.h"

// Read Buffers
#include "Simulation.h"

// Write Buffer
#include "Simulation_$(ItemName).h"

int    g_Simulation_$(ItemName)_Live_Count;
vec2   g_Simulation_$(ItemName)_Live_Pos[kSimulation_$(ItemName)_Live_MaxCount];
float  g_Simulation_$(ItemName)_Live_Age[kSimulation_$(ItemName)_Live_MaxCount];
int    s_Simulation_$(ItemName)_Live_LastWaveIndex;

const int $(ItemName)_Level_1_Count = $(WaveSpawnCount_Level_1);
float $(ItemName)_StartTime_Level_1[] = 
{
  $(ListWaveStartTime_Level_1)
};
uint32_t $(ItemName)_StartLocation_Level_1[] = 
{
  $(ListWaveStartLocation_Level_1);
};

const int $(ItemName)_Level_2_Count = $(WaveSpawnCount_Level_2);
float $(ItemName)_StartTime_Level_2[] = 
{
  $(ListWaveStartTime_Level_2)
};
uint32_t $(ItemName)_StartLocation_Level_2[] = 
{
  $(ListWaveStartLocation_Level_2);
};

const int $(ItemName)_Level_3_Count = $(WaveSpawnCount_Level_3);
float $(ItemName)_StartTime_Level_3[] = 
{
  $(ListWaveStartTime_Level_3)
};
uint32_t $(ItemName)_StartLocation_Level_3[] = 
{
  $(ListWaveStartLocation_Level_3);
};

const int $(ItemName)_Level_4_Count = $(WaveSpawnCount_Level_4);
float $(ItemName)_StartTime_Level_4[] = 
{
  $(ListWaveStartTime_Level_4)
};
uint32_t $(ItemName)_StartLocation_Level_4[] = 
{
  $(ListWaveStartLocation_Level_4);
};

void
Simulation_$(ItemName)_Live_Reset()
{
  g_Simulation_$(ItemName)_Live_Count         = 0;
  s_Simulation_$(ItemName)_Live_LastWaveIndex = 0;
}

void
Simulation_$(ItemName)_Live_CreateFrom_Wave()
{
    const int       level_wave_count[]          = { $(ItemName)_Level_1_Count, $(ItemName)_Level_2_Count, $(ItemName)_Level_3_Count, $(ItemName)_Level_4_Count };
    const float*    level_wave_start_time[]     = { $(ItemName)_StartTime_Level_1, $(ItemName)_StartTime_Level_2, $(ItemName)_StartTime_Level_3, $(ItemName)_StartTime_Level_4 };
    const uint32_t* level_wave_start_location[] = { $(ItemName)_StartLocation_Level_1, $(ItemName)_StartLocation_Level_2, $(ItemName)_StartLocation_Level_3, $(ItemName)_StartLocation_Level_4 };
    const vec2      base_vel                    = kSimulation_$(ItemName)_Live_BaseVel;
    const vec2      simulation_rect             = kSimulation_PlayArea;
    const float     simulation_rect_left        = -simulation_rect.x;
    const float     simulation_rect_width       = 2.0f * simulation_rect.x;
    const float     simulation_rect_top         = simulation_rect.y;
    const float     simulation_rect_bottom      = -simulation_rect.y;
    const float     simulation_time_step        = g_Simulation_TimeStep;
    const int       enemy_live_max_count        = kSimulation_$(ItemName)_Live_MaxCount;
    const int       level                       = g_Simulation_Level;
    const float     time                        = g_Simulation_Time;
    const int       wave_count                  = level_wave_count[level];
    const float*    wave_start_time             = level_wave_start_time[level];
    const uint32_t* wave_start_location         = level_wave_start_location[level];

    int             wave_ndx                    = s_Simulation_$(ItemName)_Live_LastWaveIndex;
    int             enemy_live_count            = g_Simulation_$(ItemName)_Live_Count;

    while (wave_ndx < wave_count)
    {
        const float    start_time     = wave_start_time[wave_ndx];
        const uint32_t start_location = wave_start_location[wave_ndx];

        if (start_time > time)
        {
            break;
        }
        for (int i = 0; i < 20; i++)
        {
            if (start_location & (1 << i))
            {
                const float start_x    = simulation_rect_left + (((float)i * simulation_rect_width) / 20.0f) + 0.5f;
                const vec2  start_pos  = vec2(start_x, simulation_rect_top);
                const vec2  start_vel  = base_vel;
                const float start_age  = FLT_MIN;
                const int   live_index = enemy_live_count % enemy_live_max_count;

                g_Simulation_$(ItemName)_Live_Pos[live_index] = start_pos;
                g_Simulation_$(ItemName)_Live_Vel[live_index] = start_vel;
                g_Simulation_$(ItemName)_Live_Age[live_index] = start_age;

                enemy_live_count++;
            }
        }
        wave_ndx++;
    }

    s_Simulation_$(ItemName)_Live_LastWaveIndex = wave_ndx;
    g_Simulation_$(ItemName)_Live_Count         = enemy_live_count;
}

void
Simulation_$(ItemName)_Live_UpdatePosAge()
{
    const vec2   base_vel                = kSimulation_$(ItemName)_Live_BaseVel;
    const int    enemy_live_count        = g_Simulation_$(ItemName)_Live_Count;
    const int    enemy_live_max_count    = kSimulation_$(ItemName)_Live_MaxCount;
    const int    enemy_update_count      = enemy_live_count % enemy_live_max_count;
    const vec2   simulation_rect         = kSimulation_PlayArea;
    const float  simulation_rect_left    = -simulation_rect.x;
    const float  simulation_rect_width   = 2.0f * simulation_rect.x;
    const float  simulation_rect_top     = simulation_rect.y;
    const float  simulation_rect_bottom  = -simulation_rect.y;
    const float  simulation_time_step    = g_Simulation_TimeStep;

    for (int live_ndx = 0; live_ndx < enemy_update_count; live_ndx++)
    {
        float age = g_Simulation_$(ItemName)_Live_Age[live_ndx];

        if (age > 0.0f)
        {
            vec2  pos = g_Simulation_$(ItemName)_Live_Pos[live_ndx];

            pos = pos + base_vel;
            age = (pos.y < simulation_rect_bottom)?0.0f:(age + simulation_time_step);

            g_Simulation_$(ItemName)_Live_Pos[live_ndx] = pos;
            g_Simulation_$(ItemName)_Live_Age[live_ndx] = age;
        }
    }
}

void
Simulation_$(ItemName)_Live_Update()
{
    Simulation_$(ItemName)_Live_CreateFrom_Wave();
    Simulation_$(ItemName)_Live_UpdatePosAge();
}

